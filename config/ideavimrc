" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

"" -- Set Handlers --
sethandler <C-C> n-v:ide i:vim
sethandler <C-A> a:ide
sethandler <C-B> n-v:vim i:ide
sethandler <C-D> a:ide
sethandler <C-F> n-v:vim i:ide
sethandler <C-K> a:ide
sethandler <C-R> n-v:vim i:ide
sethandler <C-S> a:ide
sethandler <C-V> a:ide
sethandler <C-W> a:vim
sethandler <C-X> a:ide

sethandler <C-Up> n-v:vim i:ide
sethandler <C-Down> n-v:vim i:ide

"" -- Options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
" Do incremental searching.
set incsearch
" linenumber or relativenumber
set linenumber
" display commands at bottom of the screen
set showmode
set showcmd
" Turn visual bell off
set visualbell
set noerrorbells
" Search Options
set smartcase " Ignore case if all lowercase
set setincsearch " Start search as I type
set hlsearch " Highlight all results
" Set system clipboard
set clipboard+=unnamed
" set Leader Key
let mapleader = " "

"" -- Remaps --
" Don't use Ex mode, use Q for formatting.
map Q gq

inoremap jk <Esc>

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '>-2<cr>gv=gv

vnoremap <C-Down> :m '>+1<CR>gv=gv
vnoremap <C-Up> '>-2<cr>gv=gv

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>\

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
set which-key
set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_DefaultDelay = 0

set nerdtree
" Highlight copied text
Plug 'machakann/vim-highlightedyank'
" Commentary plugin
Plug 'tpope/vim-commentary'
" Nerdtree
Plug 'preservim/nerdtree'

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)
map <leader>b <Action>(Switcher)

" File navigation
let g:WhichKeyDesc_search = "<leader>f Go To File"
map <leader>fe <action>(SearchEverywhere)
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

"" Map \b to toggle the breakpoint on the current line
map \b <Action>(ToggleLineBreakpoint)

" Refactoring
let g:WhichKeyDesc_refactor = "<leader>r Refactoring"
map <leader>rc <Action>(ReformatCode)
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Open Nerdtree
map <leader>x :NERDTreeToggle<CR>

" Display options
let g:WhichKeyDesc_display = "<leader>d Toggle Display Mode"
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)

" Window splits
let g:WhichKeyDesc_window = "<leader>w Window"
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)

" Close active tab
map <leader>q <action>(CloseContent)

" Go to code
let g:WhichKeyDesc_goto = "<leader>g Goto..."
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)

" Errors
let g:WhichKeyDesc_errors = "<leader>e Error navigation"
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" Jump Between Methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Debugging
map <leader>aa <Action>(Bookmarks.Toggle)
